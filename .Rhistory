#-------------------------------------------------------------------------
# Visualize
#-------------------------------------------------------------------------
# Compare predictions for X = mu+sd and X = mu-sd (on Amount, Inst. rate const. at mean)
newdata <- data.frame( rep(mean(myCredit$Amount)+sd(myCredit$Amount),2),
rep(mean(myCredit$InstallmentRatePercentage),2))
colnames(newdata)=c('Amount','InstallmentRatePercentage')
newdata
plot(survfit(ResultSP, newdata, se.fit=F), xlab = "Time", ylab="Survival probability")
newdata
ts = seq(min(Lifetime),max(Lifetime),length.out = 200)
newdata[,'Amount']=rep(mean(myCredit$Amount)-sd(myCredit$Amount),2)
lines(survfit(ResultSP, newdata, se.fit=F), lty = 2)
legend('topright',c("Cox, X = mu+sd","Cox, X = mu-sd"),lty=c(1,2),col=c(1,1))
title("Figure 8b")
#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
#=========================================================================
# Prepare Environment
#-------------------------------------------------------------------------
library(survival)
library(MASS)
library(fitdistrplus)
#=========================================================================
# Prepare Environment
#-------------------------------------------------------------------------
library(survival)
library(MASS)
library(fitdistrplus)
#=========================================================================
# Step 0. Get the data
#-------------------------------------------------------------------------
myCredit=read.csv('OvarianCancerData.csv')   # Extract the German Credit Data
head(myCredit)        # Have a glimpse of data
names(myCredit)       # the column names of the data
str(myCredit)         # types of variables
summary(myCredit)     # descriptive statistics
#=========================================================================
# Prepare Environment
#-------------------------------------------------------------------------
library(survival)
library(MASS)
library(fitdistrplus)
#=========================================================================
# Step 0. Get the data
#-------------------------------------------------------------------------
myCredit=read.csv('OvarianCancerData.csv')   # Extract the German Credit Data
head(myCredit)        # Have a glimpse of data
names(myCredit)       # the column names of the data
str(myCredit)         # types of variables
summary(myCredit)     # descriptive statistics
#=========================================================================
# Step 1. Preparing Right Censor Data
#-------------------------------------------------------------------------
Lifetime = myCredit$time                  # Right Censor Survival Data
Lifetime
summary(Lifetime)
Status = myCredit$status    # Censoring indicator variable (1 for complete obs, 0 for censored)
# Data preparation for AFT parametric fit
CensorData = data.frame(cbind(Lifetime,Status))                 # Censor Data
#=========================================================================
# Step 1. Preparing Right Censor Data
#-------------------------------------------------------------------------
Lifetime = myCredit$time                  # Right Censor Survival Data
Status = myCredit$status    # Censoring indicator variable (1 for complete obs, 0 for censored)
# Data preparation for AFT parametric fit
CensorData = data.frame(cbind(Lifetime,Status))                 # Censor Data
SurvObject = Surv(myCredit$time,myCredit$status)    # Survival Object
SurvObject
# Preparing right-censored data for parametric fit
left = Lifetime; right = Lifetime; right[which(Status==0)] = NA # left=right for failed and NA for censored
LRdata = data.frame(cbind(left,right))
#=========================================================================
# Step 3a. Parametric Survival Function Estimation without Covariate
#-------------------------------------------------------------------------
# Parametric estimate of survival function
FitG = fitdistcens(LRdata,"gamma");   ShapeG = FitG$est[1];     RateG = FitG$est[2]
#=========================================================================
# Step 3a. Parametric Survival Function Estimation without Covariate
#-------------------------------------------------------------------------
# Parametric estimate of survival function
FitG = fitdistcens(LRdata,"gamma");   ShapeG = FitG$est[1];     RateG = FitG$est[2]
FitW = fitdistcens(LRdata,"weibull"); ShapeW = FitW$est[1];     ScaleW = FitW$est[2]
FitLN = fitdistcens(LRdata,"lnorm");  LocationLN=FitLN$est[1];  ShapeLN = FitLN$est[2]
library(actuar)
FitLL = fitdistcens(LRdata,"llogis"); ShapeLL = FitLL$est[1];   ScaleLL = FitLL$est[2]
#=========================================================================
# Step 3a. Parametric Survival Function Estimation without Covariate
#-------------------------------------------------------------------------
# Parametric estimate of survival function
FitG = fitdistcens(LRdata,"gamma");   ShapeG = FitG$est[1];     RateG = FitG$est[2]
#=========================================================================
# Step 3a. Parametric Survival Function Estimation without Covariate
#-------------------------------------------------------------------------
# Parametric estimate of survival function
FitG = fitdistcens(LRdata,"gamma");   ShapeG = FitG$est[2];     RateG = FitG$est[3]
#=========================================================================
# Step 3a. Parametric Survival Function Estimation without Covariate
#-------------------------------------------------------------------------
# Parametric estimate of survival function
FitG = fitdistcens(LRdata,"gamma");   ShapeG = FitG$est[1];     RateG = FitG$est[2]
#=========================================================================
# Step 3a. Parametric Survival Function Estimation without Covariate
#-------------------------------------------------------------------------
# Parametric estimate of survival function
FitW = fitdistcens(LRdata,"weibull"); ShapeW = FitW$est[1];     ScaleW = FitW$est[2]
FitLN = fitdistcens(LRdata,"lnorm");  LocationLN=FitLN$est[1];  ShapeLN = FitLN$est[2]
library(actuar)
FitLL = fitdistcens(LRdata,"llogis"); ShapeLL = FitLL$est[1];   ScaleLL = FitLL$est[2]
par(mfrow=c(1,1))
trange = (0:max(na.omit(LRdata[,2])))                 # 0 to maximum failure time
#=========================================================================
# Step 3a. Parametric Survival Function Estimation without Covariate
#-------------------------------------------------------------------------
# Parametric estimate of survival function
FitG = fitdistcens(LRdata,"gamma");   ShapeG = FitG$est[1];     RateG = FitG$est[2]
#=========================================================================
# Step 3a. Parametric Survival Function Estimation without Covariate
#-------------------------------------------------------------------------
# Parametric estimate of survival function
FitG = fitdistcens(LRdata,"gamma");   ShapeG = FitG$est[1];     RateG = FitG$est[2]
#=========================================================================
# Prepare Environment
#-------------------------------------------------------------------------
library(survival)
library(MASS)
library(fitdistrplus)
#=========================================================================
# Step 0. Get the data
#-------------------------------------------------------------------------
myCredit=read.csv('OvarianCancerData.csv')   # Extract the German Credit Data
head(myCredit)        # Have a glimpse of data
names(myCredit)       # the column names of the data
str(myCredit)         # types of variables
summary(myCredit)     # descriptive statistics
#=========================================================================
# Step 1. Preparing Right Censor Data
#-------------------------------------------------------------------------
Lifetime = myCredit$status                  # Right Censor Survival Data
Status = myCredit$treatment    # Censoring indicator variable (1 for complete obs, 0 for censored)
# Data preparation for AFT parametric fit
CensorData = data.frame(cbind(Lifetime,Status))                 # Censor Data
SurvObject = Surv(myCredit$status,myCredit$treatment)    # Survival Object
# Preparing right-censored data for parametric fit
left = Lifetime; right = Lifetime; right[which(Status==0)] = NA # left=right for failed and NA for censored
LRdata = data.frame(cbind(left,right))
LRdata
#=========================================================================
# Prepare Environment
#-------------------------------------------------------------------------
library(survival)
library(MASS)
library(fitdistrplus)
#=========================================================================
# Step 0. Get the data
#-------------------------------------------------------------------------
myCredit=read.csv('OvarianCancerData.csv')   # Extract the German Credit Data
head(myCredit)        # Have a glimpse of data
names(myCredit)       # the column names of the data
str(myCredit)         # types of variables
summary(myCredit)     # descriptive statistics
#=========================================================================
# Step 1. Preparing Right Censor Data
#-------------------------------------------------------------------------
Lifetime = myCredit$time                  # Right Censor Survival Data
Status = myCredit$status    # Censoring indicator variable (1 for complete obs, 0 for censored)
# Data preparation for AFT parametric fit
CensorData = data.frame(cbind(Lifetime,Status))                 # Censor Data
SurvObject = Surv(myCredit$time,myCredit$status)    # Survival Object
SurvObject
# Preparing right-censored data for parametric fit
left = Lifetime; right = Lifetime; right[which(Status==0)] = NA # left=right for failed and NA for censored
LRdata = data.frame(cbind(left,right))
LRdata
LRdata = data.frame(cbind(left,right))
#=========================================================================
# Step 3a. Parametric Survival Function Estimation without Covariate
#-------------------------------------------------------------------------
# Parametric estimate of survival function
FitG = fitdistcens(LRdata,"gamma");   ShapeG = FitG$est[1];     RateG = FitG$est[2]
#=========================================================================
# Step 3a. Parametric Survival Function Estimation without Covariate
#-------------------------------------------------------------------------
# Parametric estimate of survival function
FitW = fitdistcens(LRdata,"weibull"); ShapeW = FitW$est[1];     ScaleW = FitW$est[2]
FitLN = fitdistcens(LRdata,"lnorm");  LocationLN=FitLN$est[1];  ShapeLN = FitLN$est[2]
library(actuar)
FitLL = fitdistcens(LRdata,"llogis"); ShapeLL = FitLL$est[1];   ScaleLL = FitLL$est[2]
par(mfrow=c(1,1))
trange = (0:max(na.omit(LRdata[,2])))                 # 0 to maximum failure time
plot(trange,1-pgamma(trange, shape = ShapeG, rate = RateG),xlab="Time",
ylab="Survival probability",ylim=c(0,1),col=2,type='l')      # gamma MLE
#=========================================================================
# Step 3a. Parametric Survival Function Estimation without Covariate
#-------------------------------------------------------------------------
# Parametric estimate of survival function
#FitG = fitdistcens(LRdata,"gamma");   ShapeG = FitG$est[1];     RateG = FitG$est[2]
FitW = fitdistcens(LRdata,"weibull"); ShapeW = FitW$est[1];     ScaleW = FitW$est[2]
FitLN = fitdistcens(LRdata,"lnorm");  LocationLN=FitLN$est[1];  ShapeLN = FitLN$est[2]
library(actuar)
FitLL = fitdistcens(LRdata,"llogis"); ShapeLL = FitLL$est[1];   ScaleLL = FitLL$est[2]
par(mfrow=c(1,1))
trange = (0:max(na.omit(LRdata[,2])))                 # 0 to maximum failure time
trange = (0:max(na.omit(LRdata[,2])))                 # 0 to maximum failure time
#plot(trange,1-pgamma(trange, shape = ShapeG, rate = RateG),xlab="Time",
#    ylab="Survival probability",ylim=c(0,1),col=2,type='l')      # gamma MLE
lines(trange,1-pweibull(trange, shape = ShapeW, scale = ScaleW),col=4)    # Weibull MLE
plot(trange,1-pgamma(trange, shape = ShapeW, scale = ScaleW),xlab="Time",
ylab="Survival probability",ylim=c(0,1),col=2,type='l')      # gamma MLE
lines(trange,1-pweibull(trange, shape = ShapeW, scale = ScaleW),col=4)    # Weibull MLE
lines(trange,1-plnorm(trange,meanlog = LocationLN,sdlog = ShapeLN),col=6)    # lognormal MLE
lines(trange,1-pllogis(trange, shape = ShapeLL, scale = ScaleLL),col=8)    # loglogistic MLE
title("Figure 4")
legend('bottomleft',c("Weibull MLE-S(t)","log-Normal MLE-S(t)","log-Logistic MLE-S(t)"),lty=c(1,1,1,1),col=c(2,4,6,8),cex=.8)
#=========================================================================
# Step 3b. Parametric Survival Function Estimation using Covariate
# [Regression for right censored data]
#-------------------------------------------------------------------------
# Weibull regression
ResultW = survreg(SurvObject ~ Age+Amount+InstallmentRatePercentage+NumberExistingCredits+NumberPeopleMaintenance, data=myCredit, dist="weibull")
#=========================================================================
# Step 3b. Parametric Survival Function Estimation using Covariate
# [Regression for right censored data]
#-------------------------------------------------------------------------
# Weibull regression
ResultW = survreg(SurvObject ~ treatment+age, data=myCredit, dist="weibull")
#=========================================================================
# Step 3b. Parametric Survival Function Estimation using Covariate
# [Regression for right censored data]
#-------------------------------------------------------------------------
# Weibull regression
ResultW = survreg(SurvObject ~ treatment+age, data=myCredit, dist="weibull")
summary(ResultW)
#ResultW = survreg(SurvObject ~ Amount + InstallmentRatePercentage, data=myCredit, dist="weibull")
#summary(ResultW)
1/summary(ResultW)$scale      # shape parameter
trange = (0:max(na.omit(LRdata[,2])))                 # 0 to maximum failure time
plot(trange,1-pgamma(trange, shape = ShapeW, scale = ScaleW),xlab="Time",
ylab="Survival probability",ylim=c(0,1),col=2,type='l')      # gamma MLE
#lines(trange,1-pweibull(trange, shape = ShapeW, scale = ScaleW),col=4)    # Weibull MLE
lines(trange,1-plnorm(trange,meanlog = LocationLN,sdlog = ShapeLN),col=6)    # lognormal MLE
lines(trange,1-pllogis(trange, shape = ShapeLL, scale = ScaleLL),col=8)    # loglogistic MLE
title("Figure 4")
legend('bottomleft',c("Weibull MLE-S(t)","log-Normal MLE-S(t)","log-Logistic MLE-S(t)"),lty=c(1,1,1,1),col=c(2,4,6,8),cex=.8)
lines(trange,1-pweibull(trange, shape = ShapeW, scale = ScaleW),col=4)    # Weibull MLE
trange = (0:max(na.omit(LRdata[,2])))                 # 0 to maximum failure time
plot(trange,1-pweibull(trange, shape = ShapeW, scale = ScaleW),xlab="Time",
ylab="Survival probability",ylim=c(0,1),col=2,type='l')      # gamma MLE
#lines(trange,1-pweibull(trange, shape = ShapeW, scale = ScaleW),col=4)    # Weibull MLE
lines(trange,1-plnorm(trange,meanlog = LocationLN,sdlog = ShapeLN),col=6)    # lognormal MLE
lines(trange,1-pllogis(trange, shape = ShapeLL, scale = ScaleLL),col=8)    # loglogistic MLE
title("Figure 4")
legend('bottomleft',c("Weibull MLE-S(t)","log-Normal MLE-S(t)","log-Logistic MLE-S(t)"),lty=c(1,1,1,1),col=c(2,4,6,8),cex=.8)
#=========================================================================
# Step 3b. Parametric Survival Function Estimation using Covariate
# [Regression for right censored data]
#-------------------------------------------------------------------------
# Weibull regression
ResultW = survreg(SurvObject ~ treatment+age, data=myCredit, dist="weibull")
summary(ResultW)
#ResultW = survreg(SurvObject ~ Amount + InstallmentRatePercentage, data=myCredit, dist="weibull")
#summary(ResultW)
1/summary(ResultW)$scale      # shape parameter
#-------------------------------------------------------------------------
# lognormal regression
ResultLN = survreg(SurvObject ~ treatment+age, data=myCredit, dist="lognormal")
summary(ResultLN)
#ResultLN = survreg(SurvObject ~ Amount + InstallmentRatePercentage, data=myCredit, dist="lognormal")
#summary(ResultLN)
#-------------------------------------------------------------------------
# loglogistic regression
ResultLL = survreg(SurvObject ~ treatment+age, data=myCredit, dist="loglogistic")
summary(ResultLL)
#========================================================================
# Step 2. Non-parametric Survival Function/Hazard Estimation
#-------------------------------------------------------------------------
# Step 2.1. Non-parametric Survival Function Estimation [KM]
#-------------------------------------------------------------------------
# Kaplan Meier estimate of survival function
Result = survfit(Surv(Lifetime,Status)~1,
CensorData,stype=1)  # stype=1: direct method (i.e. KM) to estimate S(t)
quantile(Result,prob=c(0.25,0.95))
plot(Result,xlab = "time",
ylab="Survival probability",ylim=c(0,1),col=1)           # KM estimator and confidence intervals
title("Figure 5A")
legend('bottomleft',c("KM Estimate","95% CI"),lty=c(1,2),col=c(1,1))
#-------------------------------------------------------------------------
# Step 2.2. Non-parametric Survival Function Estimation [NA]
#-------------------------------------------------------------------------
# Nelson Aalen estimate of survival function
ResultH = survfit(Surv(Lifetime,Status)~1,CensorData,conf.type="plain",
stype=2,ctype=1)  # stype=2,ctype=1: indirect method to estimate S(t) from H(t)
plot(ResultH$time,ResultH$cumhaz,xlab = "time",
ylab="Cummulative hazard",ylim=c(0,3),type="l",col=1)
lines(ResultH$time,ResultH$cumhaz+1.96*ResultH$std.err,lty=2,col=1)
lines(ResultH$time,ResultH$cumhaz-1.96*ResultH$std.err,lty=2,col=1)
title("Figure 5B")
legend('topleft',c("NA Estimate for H(t)","95% CI"),lty=c(1,2),col=c(1,1))
plot(ResultH,xlab = "time",
ylab="Survival probability",ylim=c(0,1),col=1)
title("Figure 5C")
legend('bottomleft',c("NA Estimate for S(t)","95% CI"),lty=c(1,2),col=c(1,1))
#-------------------------------------------------------------------------
# Step 2.3. Kernel estimate of hazard function for right-censored data
#-------------------------------------------------------------------------
library(muhaz)
mhFit=muhaz(Lifetime,Status,kern="epanechnikov")
plot(mhFit$est.grid,mhFit$haz.est,type="l",xlab="time",ylab="Hazard rate")
title("Figure 5D")
#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
# Step 2.3. Kernel estimate of hazard function for right-censored data
#-------------------------------------------------------------------------
library(muhaz)
mhFit=muhaz(Lifetime,Status,kern="epanechnikov")
plot(mhFit$est.grid,mhFit$haz.est,type="l",xlab="time",ylab="Hazard rate")
title("Figure 5D")
#=========================================================================
# Step 2. Non-parametric Survival Function/Hazard Estimation
#-------------------------------------------------------------------------
# Kaplan Meier estimate of survival function
Result = survfit(Surv(Lifetime,Status)~1,
CensorData,stype=1)  # stype=1: direct method (i.e. KM) to estimate S(t)
# Nelson Aalen estimate of survival function
ResultH = survfit(Surv(Lifetime,Status)~1,CensorData,conf.type="plain",
stype=2,ctype=1)  # stype=2,ctype=1: indirect method to estimate S(t) from H(t)
par(mfrow=c(1,2))
plot(Result,xlab="time",ylab="Survival probability",ylim=c(0,1),col=1)
title(main='Figure 7A',sub="KM Surv Fn")
plot(ResultH$cumhaz,xlab="time",ylab="Cumulative hazard",ylim=c(0,3),type="s",col=1)
lines(ResultH$cumhaz+1.96*ResultH$std.err,type="s",lty=2,col=1)
lines(ResultH$cumhaz-1.96*ResultH$std.err,type="s",lty=2,col=1)
title(sub="NA Cum Haz")
#-------------------------------------------------------------------------
# Step 3. Comparison of survival/Hazard functions between groups [KM/NA]
#-------------------------------------------------------------------------
# Grouping on Gender (Male=1 & Female=2)
#---------------------------------------------------------------
Group = rep(1,length(Lifetime));
myCredit
#-------------------------------------------------------------------------
# Step 3. Comparison of survival/Hazard functions between groups [KM/NA]
#-------------------------------------------------------------------------
# Grouping on Gender (Male=1 & Female=2)
#---------------------------------------------------------------
Group = rep(1,length(Lifetime));
Group[(myCredit$treatment==1) | (myCredit$treatment==2)]=2
head(cbind(Lifetime,Status,Group))
#-------------------------------------------------------------------------
# Step 3. Comparison of survival/Hazard functions between groups [KM/NA]
#-------------------------------------------------------------------------
# Grouping on Gender (Male=1 & Female=2)
#---------------------------------------------------------------
Group = rep(1,length(Lifetime));
Group[(myCredit$treatment==1)]=1
Group[(myCredit$treatment==2)]=2
head(cbind(Lifetime,Status,Group))
par(mfrow=c(1,2))
# Right censored data: graphical comparison of two groups
KM_G=survfit(Surv(Lifetime,Status)~Group)
plot(KM_G,col=c(1,2),xlab="time",ylab="survival probability",
xlim=c(0,max(KM_G$time)+1),ylim=c(0,1.05))
legend('topright',c("Male","Female"),lty=c(1,1),col=c(1,2),cex=.6)
title(main='Figure 7B',sub="KM Surv Fn")
NA_G=survfit(Surv(Lifetime,Status)~Group,stype=2,ctype=1)
plot(NA_G$time[seq(1,32)],NA_G$cumhaz[seq(1,32)],col=c(1),
xlab="time",ylab="cumulative hazard",type='s',
xlim=c(0,max(NA_G$time)+1),ylim=c(0,ceiling(max(NA_G$cumhaz))+.1))
lines(NA_G$time[seq(33,55)],NA_G$cumhaz[seq(33,55)],col=c(2),type='s')
legend('topleft',c("Male","Female"),lty=c(1,1),col=c(1,2),cex=.6)
legend('topleft',c("treatment=1","treatment=2"),lty=c(1,1),col=c(1,2),cex=.6)
title(sub="NA Cum Haz")
# Right censored data: statistical comparison of two groups
s1=survdiff(Surv(Lifetime,Status)~Group,rho = 0)           # logrank test
s2=survdiff(Surv(Lifetime,Status)~Group,rho = 1)           # Gehan-Wilcoxon test
#-------------------------------------------------------------------------
# Grouping on skillset (Unskilled=1, Skilled=2 & Highly Skilled=3)
#---------------------------------------------------------------
Group = rep(1,length(Lifetime));
#-------------------------------------------------------------------------
# Grouping on skillset (Unskilled=1, Skilled=2 & Highly Skilled=3)
#---------------------------------------------------------------
Group = rep(1,length(Lifetime));
Group[(myCredit$age<=39)]=1
Group[(myCredit$age<=59)]=3
Group[(myCredit$age<=79)]=5
Group[(myCredit$age<=69)]=4
Group[(myCredit$age<=49)]=2
Group[(myCredit$age<=39)]=1
Group[(40<=myCredit$age<=49)]=2
Group[(myCredit$age<=39)]=1
Group[(40<= myCredit$age <=49)]=2
#-------------------------------------------------------------------------
# Grouping on skillset (Unskilled=1, Skilled=2 & Highly Skilled=3)
#---------------------------------------------------------------
Group = rep(1,length(Lifetime));
Group[(50<=myCredit$age<=55)]=1
#-------------------------------------------------------------------------
# Grouping on skillset (Unskilled=1, Skilled=2 & Highly Skilled=3)
#---------------------------------------------------------------
Group = rep(1,length(Lifetime));
Group[(myCredit$age<=55)]=1
Group[(myCredit$age>55)]=2
head(cbind(Lifetime,Status,Group))
par(mfrow=c(1,2))
# Right censored data: graphical comparison between groups
KM_G=survfit(Surv(Lifetime,Status)~Group)
plot(KM_G,col=c(1,2,3),xlab="time",ylab="survival probability",
xlim=c(0,max(KM_G$time)+1),ylim=c(0,1.05))
legend('topright',c("G1=USkl","G2=Skl","G3=HSkl"),lty=c(1,1,1),col=c(1,2,3),cex=.6)
title(main='Figure 7C',sub="KM Surv Fn")
NA_G=survfit(Surv(Lifetime,Status)~Group,stype=2,ctype=1)
plot(NA_G$time[seq(1,26)],NA_G$cumhaz[seq(1,26)],col=c(1),
xlab="time",ylab="cumulative hazard",type='s',
xlim=c(0,max(NA_G$time)+1),ylim=c(0,ceiling(max(NA_G$cumhaz))+.1))
lines(NA_G$time[seq(27,57)],NA_G$cumhaz[seq(27,57)],col=c(2),type='s')
lines(NA_G$time[seq(58,77)],NA_G$cumhaz[seq(58,77)],col=c(3),type='s')
legend('topleft',c("G1=USkl","G2=Skl","G3=HSkl"),lty=c(1,1,1),col=c(1,2,3),cex=.6)
title(sub="NA Cum Haz")
# Right censored data: statistical comparison between groups
#All groups at a time
# Between all of them at together [H0:= survival functions of three groups are same]
survdiff(Surv(Lifetime,Status)~Group,rho = 0)           # logrank test
survdiff(Surv(Lifetime,Status)~Group,rho = 1)           # Gehan-Wilcoxon test
#Two groups at a time
# Between skilled and highly qualified
survdiff(Surv(Lifetime[Group!=1],Status[Group!=1])~Group[Group!=1],rho = 0)           # logrank test
#Two groups at a time
# Between skilled and highly qualified
survdiff(Surv(Lifetime[Group!=1],Status[Group!=1])~Group[Group!=1],rho = 0)           # logrank test
#Two groups at a time
# Between skilled and highly qualified
survdiff(Surv(Lifetime[Group=1],Status[Group=1])~Group[Group=1],rho = 0)           # logrank test
#Two groups at a time
# Between skilled and highly qualified
survdiff(Surv(Lifetime[Group=1],Status[Group=2])~Group[Group=1],rho = 0)           # logrank test
#Two groups at a time
# Between skilled and highly qualified
survdiff(Surv(Lifetime[Group=1],Status[Group=1])~Group[Group=1],rho = 0)           # logrank test
#Two groups at a time
# Between skilled and highly qualified
survdiff(Surv(Lifetime[Group!=0],Status[Group!=0])~Group[Group!=0],rho = 0)           # logrank test
survdiff(Surv(Lifetime[Group!=0],Status[Group!=0])~Group[Group!=0],rho = 1)           # Gehan-Wilcoxon test
# Step 2. Build Cox proportional hazard models Semi-Parametric
#-------------------------------------------------------------------------
# Cox proportional hazards model regression
ResultSP = coxph(SurvObject ~ treatment+age, data=myCredit)     # Build the coxph model
summary(ResultSP)
BaselineHazard=basehaz(ResultSP)
plot(BaselineHazard$time,BaselineHazard$hazard,type='s',xlab='Time',ylab='Baseline Hazard')
ResultSP = coxph(SurvObject ~ treatment+age, data=myCredit)     # Build the coxph model
summary(ResultSP)
BaselineHazard=basehaz(ResultSP)
lines(BaselineHazard$time,BaselineHazard$hazard,type='s',lty=2)
legend('topleft',c("H0(t), 5 covariate","H0(t), 2 covariate"),lty=c(1,2),col=c(1,1))
title("Figure 8a")
#-------------------------------------------------------------------------
# Visualize
#-------------------------------------------------------------------------
# Compare predictions for X = mu+sd and X = mu-sd (on Amount, Inst. rate const. at mean)
newdata <- data.frame( rep(mean(myCredit$Amount)+sd(myCredit$Amount),2),
rep(mean(myCredit$InstallmentRatePercentage),2))
#-------------------------------------------------------------------------
# Visualize
#-------------------------------------------------------------------------
# Compare predictions for X = mu+sd and X = mu-sd (on Amount, Inst. rate const. at mean)
newdata <- data.frame( rep(mean(myCredit$treatment)+sd(myCredit$treatment),2),
rep(mean(myCredit$age),2))
colnames(newdata)=c('Treatment','Age')
plot(survfit(ResultSP, newdata, se.fit=F), xlab = "Time", ylab="Survival probability")
#-------------------------------------------------------------------------
# Visualize
#-------------------------------------------------------------------------
# Compare predictions for X = mu+sd and X = mu-sd (on Amount, Inst. rate const. at mean)
newdata <- data.frame( rep(mean(myCredit$age)+sd(myCredit$age),2))
colnames(newdata)=c('Treatment','Age')
colnames(newdata)=c(Age')
colnames(newdata)=c('Age')
#-------------------------------------------------------------------------
# Visualize
#-------------------------------------------------------------------------
# Compare predictions for X = mu+sd and X = mu-sd (on Amount, Inst. rate const. at mean)
newdata <- data.frame( rep(mean(myCredit$age)+sd(myCredit$age),2))
colnames(newdata)=c('Age')
plot(survfit(ResultSP, newdata, se.fit=F), xlab = "Time", ylab="Survival probability")
ResultSP = coxph(SurvObject ~ treatment+age, data=myCredit)     # Build the coxph model
summary(ResultSP)
BaselineHazard=basehaz(ResultSP)
plot(BaselineHazard$time,BaselineHazard$hazard,type='s',xlab='Time',ylab='Baseline Hazard')
ResultSP = coxph(SurvObject ~ treatment+age, data=myCredit)     # Build the coxph model
summary(ResultSP)
BaselineHazard=basehaz(ResultSP)
plot(BaselineHazard$time,BaselineHazard$hazard,type='s',xlab='Time',ylab='Baseline Hazard')
ResultSP = coxph(SurvObject ~ age, data=data)     # Build the coxph model
ResultSP = coxph(SurvObject ~ age, data=myCredit)     # Build the coxph model
summary(ResultSP)
BaselineHazard=basehaz(ResultSP)
lines(BaselineHazard$time,BaselineHazard$hazard,type='s',lty=2)
legend('topleft',c("H0(t), 2 covariates","H0(t), 1 covariate"),lty=c(1,2),col=c(1,1))
title("Cox Proportional Model")
# Compare predictions for X = mu+sd and X = mu-sd (on Age at mean)
newdata <- data.frame(rep(mean(data$age)+sd(data$age),2))
# Compare predictions for X = mu+sd and X = mu-sd (on Age at mean)
newdata <- data.frame(rep(mean(myCredit$age)+sd(myCredit$age),2))
colnames(newdata)=c('age')
plot(survfit(ResultSP, newdata, se.fit=F), xlab = "Time", ylab="Survival probability")
ts = seq(min(Lifetime),max(Lifetime))
newdata[,'age']=rep(mean(data$age)-sd(data$age),2)
newdata[,'age']=rep(mean(myCredit$age)-sd(myCredit$age),2)
lines(survfit(ResultSP, newdata, se.fit=F), lty = 2)
legend('topright',c("Cox, X = mu+sd","Cox, X = mu-sd"),lty=c(1,2),col=c(1,1))
title("Prediction using the Age Co-variate")
